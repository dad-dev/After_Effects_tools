/**********************************************************************************************************************************/**********************************************************************************************************************************/**/** BeastKit.jsx/** v. 1.21/** Author:  Jeffery W. Hall/** Last Updated:  January 10, 2017/**/**********************************************************************************************************************************/*********************************************************************************************************************************/main();function main() {/**********************************************************************************************************************************/**/** Initialize App/**/*********************************************************************************************************************************/// Locate compsvar time_db = {  comp: "",  one_title_pos: [960, 440, 0],  two_title_pos: [960, 540, 0],  two_day_pos: [960, 630, 0]};var time_db_left = {  comp: ""};for (var i = 1; i <= app.project.items.length; i++) {  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Master Control") {      var master_ctrl = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Time Database") {      time_db.comp = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Right submaster 8 sec") {      var epl_r_8_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL R TALENT") {      var epl_r_talent = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Hero Logo master") {      var hero_logo = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Hero Logo master 4secs") {      var hero_logo4s = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Right submaster 10 sec") {      var epl_r_10_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Right submaster 6 sec") {      var epl_r_6_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Right submaster 5 sec") {      var epl_r_5_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Full Cast submaster") {      var epl_full_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Hero Logo master Reverse") {      var hero_logo_rev = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL FULL TALENT") {      var epl_full_talent = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Left submaster") {      var epl_l_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Right copy") {      var epl_copy_right = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL Left copy") {      var epl_copy_left = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "EPL L TALENT") {      var epl_l_talent = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Time Database Left") {      time_db_left.comp = app.project.items[i];  }  // Opens  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Open Front Callout master") {      var opn_call = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Show Title A sub") {      var title_a = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Show Title B sub") {      var title_b = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Callout sub") {      var call = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Open master") {      var opn_master = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Intro") {      var opn_intro = app.project.items[i];  }  if (app.project.items[i] instanceof FootageItem && app.project.items[i].name == "Hero Logo BG") {      var hero_logo_bg = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "BMP Talent submaster") {      var bmp_tal_sub = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Bump Talent MSG") {      var bmp_tal_msg = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "TALENT - Front") {      var bmp_talent_front = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "TALENT - Back") {      var bmp_talent_back = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Bump Transition") {      var bmp_trans = app.project.items[i];  }  // Lower Third comps  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Show Title element") {      var l3d_title = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Tune-in element") {      var l3d_tunein = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "L3D No Open-Close Anim master") {      var l3d_master = app.project.items[i];  }  // Bug comps  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Color Wave sub master") {      var color_wave = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Bug Master") {      var bug_master = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Bug Right Side") {      var bug_right_master = app.project.items[i];  }  // Transisition comps  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Dot Color") {      var dot_color = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Logo Color") {      var logo_color = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Transition1 Color-Color") {      var trans1_color = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Transition1 Color-Gray") {      var trans1_gray = app.project.items[i];  }  // Billboard comps  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "White BG sub") {      var color_corner = app.project.items[i];  }  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "Gray BG sub") {      var gray_corner = app.project.items[i];  }  // Specials  if (app.project.items[i] instanceof CompItem && app.project.items[i].name == "WHC Bump MSG") {      var whc_bmp_msg = app.project.items[i];  }  // Get talent folders  if (app.project.items[i] instanceof FolderItem && app.project.items[i].name == "Talent Containers" && app.project.items[i].parentFolder.name == "EPL Right") {      var epl_r_tal_container = app.project.items[i];  }}/**********************************************************************************************************************************/**/** Data/**/*********************************************************************************************************************************/var shows = {  "BBD": "BLUE\nBLOODS",  "BRN": "BURN\nNOTICE",  "CRM": "CRIMINAL\nMINDS",  "CSB": "CRIMINAL\nMINDS",  "GHW": "GHOST\nWHISPERER",  "LWO": "LAW &\nORDER",  "LAO": "LAW &\nORDER",  "SVU": "LAW &\nORDER",  "LEV": "LEVERAGE",  "LST": "THE\nLISTENER",  "PSY": "PSYCH",  "RBL": "ROOKIE\nBLUE",  "SVH": "SAVING\nHOPE",  "WHC": "WHITE\nCOLLAR"};var shows_one_line = {  "BBD": "BLUE BLOODS",  "BRN": "BURN NOTICE",  "CRM": "CRIMINAL MINDS",  "CSB": "CRIMINAL MINDS: SUSPECT BEHAVIOR",  "GHW": "GHOST WHISPERER",  "LWO": "LAW & ORDER",  "LAO": "LAW & ORDER: CRIMINAL INTENT",  "SVU": "LAW & ORDER: SPECIAL VICTIMS UNIT",  "LEV": "LEVERAGE",  "LST": "THE LISTENER",  "PSY": "PSYCH",  "RBL": "ROOKIE BLUE",  "SVH": "SAVING HOPE",  "WHC": "WHITE COLLAR"};var subtitles = ["SUSPECT BEHAVIOR", "CRIMINAL INTENT", "SVU"];var colors = {};var show_list = new Array();for (var key in shows) {  colors[key] = [master_ctrl.layer(key).property("Effects").property("Light").property("Color").value,                      master_ctrl.layer(key).property("Effects").property("Mid").property("Color").value,                      master_ctrl.layer(key).property("Effects").property("Dark").property("Color").value];  show_list.push(key);}var day_abbrev = [  "NEX",  "MON",  "TUE",  "WED",  "THU",  "FRI",  "SAT",  "SUN",  "TOD",  "TON",  "TOM",  "WKD",  "WKN",  "KEP",  "AD"];var days = [  [    "Day One",    "Next",    "Monday",    "Tuesday",    "Wednesday",    "Thursday",    "Friday",    "Saturday",    "Sunday",    "Today",    "Tonight",    "Tomorrow",    "Weekdays",    "Weeknights",    "Keep Watching",    "All Day"  ],  [    "Day Two",    "Monday",    "Tuesday",    "Wednesday",    "Thursday",    "Friday",    "Saturday",    "Sunday",    "Tonight",    "Tomorrow"  ],  [    "Day Three",    "Monday",    "Tuesday",    "Wednesday",    "Thursday",    "Friday",    "Saturday",    "Sunday",    "Tomorrow"  ]];var month1 = [  "Month One",  "January",  "February",  "March",  "April",  "May",  "June",  "July",  "August",  "September",  "October",  "November",  "December"];var month2 = [  "Month Two",  "January",  "February",  "March",  "April",  "May",  "June",  "July",  "August",  "September",  "October",  "November",  "December"];var days_of_month = (function(){  var days = new Array();  // days.push("-");  for (var i = 1; i <= 31; i++) {    days.push(i);  }  return days;}());var time = [  "Select Time",  "1:00",  "2:00",  "3:00",  "4:00",  "5:00",  "6:00",  "7:00",  "8:00",  "9:00",  "10:00",  "11:00",  "12:00"];// Default timevar master_time_txt = "8/9c PM";var show_classifier = ["Show Classifier", "Season", "Premiere", "Priemieres", "Season Premiere", "Original Series", "All Day",                        "Marathon", "Back to Back", "Thanksgiving Marathon", "New Year's Eve Marathon", "New Year's Day Marathon"];var show_classifier_abrv = ["S", "PRE", "PRS", "SPR", "ORG", "AD", "MAR", "BTB", "THG", "NYE", "NYD"];var tunein_classifier = ["Tune-in Classifier", "Season", "Premiere", "Priemieres", "Season Premiere", "Next", "Original Series", "All Day",                        "Marathon", "Back to Back", "Thanksgiving Marathon", "New Year's Eve Marathon", "New Year's Day Marathon"];var tunein_classifier_abrv = ["S", "PRE", "PRS", "SPR", "NEX", "ORG", "AD", "MAR", "BTB", "THG", "NYE", "NYD"];/**********************************************************************************************************************************/**/** Application View/**/*********************************************************************************************************************************/var myWin = new Window("palette", "BeastKit v1.21", undefined, {resizeable: false});  myWin.orientation = "column";{ // Group 1  var groupOne = myWin.add("group", undefined, "GroupOne");  groupOne.orientation = "column";  groupOne.minimumSize.height = 200;  groupOne.alignChildren = "fill";  var jobPanel = groupOne.add("panel", undefined, "Enter Job Number");  jobPanel.alignment = ["", "top"];  var job_num = jobPanel.add ("edittext", undefined);  job_num.minimumSize.width = 200;  job_num.active = true;  var panelOne = groupOne.add("panel", undefined, "Select Show");  var listShow = panelOne.add("dropdownlist", undefined, show_list);  listShow.minimumSize.width = 200;  listShow.selection = 0;  listShow.active = true;  var logoStylePanel = groupOne.add("panel", undefined, "Hero Logo Style");  logoStylePanel.alignChildren = "left";  var logo_radio1 = logoStylePanel.add ("radiobutton", undefined, "Episodic");  var logo_radio2 = logoStylePanel.add ("radiobutton", undefined, "Image");  logo_radio1.value = true;}{ // Group 2  var groupTwo = myWin.add("group", undefined, "GroupTwo");  groupTwo.orientation = "column";  var tuneTabs = groupTwo.add("tabbedpanel", undefined);  tuneTabs.minimumSize.height = 130;  tuneTabs.minimumSize.width = 234;  tuneTabs.alignment = ["", "top"];    // Days    var daysTab = tuneTabs.add("tab", undefined, "Days");    daysTab.alignChildren = "fill";    var daySubGrp1 = daysTab.add("group", undefined, "DaySubGroup1");    daySubGrp1.orientation = "row";    var listDay1 = daySubGrp1.add("dropdownlist", undefined, days[0]);    listDay1.minimumSize.width = 110;    listDay1.selection = 0;    var add_next = daySubGrp1.add("checkbox", undefined, "Add Next");    add_next.enabled = false;    var daySubGrp2 = daysTab.add("group", undefined, "DaySubGroup2");    daySubGrp2.orientation = "row";    var listDay2 = daySubGrp2.add("dropdownlist", undefined, days[1]);    listDay2.minimumSize.width = 110;    listDay2.selection = 0;    listDay2.enabled = false;    var pluralize = daySubGrp2.add("checkbox", undefined, "Pluralize");    pluralize.enabled = false;    var daySubGrp3 = daysTab.add("group", undefined, "DaySubGroup3");    daySubGrp3.orientation = "row";    var listDay3 = daySubGrp3.add("dropdownlist", undefined, days[2]);    listDay3.minimumSize.width = 110;    listDay3.selection = 0;    listDay3.enabled = false;    var webChk = daySubGrp3.add("checkbox", undefined, "Web Mode");    // Dates    var datesTab = tuneTabs.add("tab", undefined, "Dates");    datesTab.alignChildren = "fill";    var firstMonthGrp = datesTab.add("group", undefined, "FirstMonthGrp");    firstMonthGrp.orientation = "row";    var listMonth1 = firstMonthGrp.add("dropdownlist", undefined, month1);    listMonth1.selection = 0;    var listDayOfMonth1 = firstMonthGrp.add("dropdownlist", undefined, days_of_month);    listDayOfMonth1.selection = 0;    var secondMonthGrp = datesTab.add("group", undefined, "FirstMonthGrp");    secondMonthGrp.orientation = "row";    var listMonth2 = secondMonthGrp.add("dropdownlist", undefined, month2);    listMonth2.selection = 0;    var listDayOfMonth2 = secondMonthGrp.add("dropdownlist", undefined, days_of_month);    listDayOfMonth2.selection = 0;  // Time  var timePanel = groupTwo.add("panel", undefined, "Select Time");  timePanel.minimumSize.width = 234;  var listTime = timePanel.add("dropdownlist", undefined, time);  listTime.selection = 0;  var subGrpTwo = timePanel.add("group", undefined, "SubGroupTwo");  subGrpTwo.orientation = "row";  var half_hour = subGrpTwo.add("checkbox", undefined, ":30");  var am = subGrpTwo.add("checkbox", undefined, "AM");}{ // Group 3  var groupThree = myWin.add("group", undefined, "GroupThree");  groupThree.orientation = "column";  groupThree.alignChildren = "fill";  var classifierPanel = groupThree.add("panel", undefined, "Classifiers");  classifierPanel.alignment = ["", "top"];  classifierPanel.minimumSize.width = 234;  var listShowClass = classifierPanel.add("dropdownlist", undefined, show_classifier);  listShowClass.selection = 0;  listShowClass.minimumSize.width = 200;  var listTuneClass = classifierPanel.add("dropdownlist", undefined, tunein_classifier);  listTuneClass.selection = 0;  listTuneClass.minimumSize.width = 200;  classifierPanel.add("statictext", undefined, "Season No.", "StaticText");  var seasonGrpOne = classifierPanel.add("group", undefined, "SeasonGrpOne");  seasonGrpOne.orientation = "row";  var season = seasonGrpOne.add ("edittext", undefined, 0);  season.minimumSize.width = 28;  var slider = seasonGrpOne.add ("slider", undefined, 0, 0, 20);  var bumpPanel = groupThree.add("panel", undefined, "Bump Callout");  bumpPanel.minimumSize.width = 234;  var listBumpMsg = bumpPanel.add("dropdownlist", undefined, ["Select",                                                                "Season",                                                                "Premiere",                                                                "Season Premiere",                                                                "Next",                                                                "Original Series",                                                                "All Day",                                                                "All New",                                                                "Back to Back",                                                                "Keep Watching",                                                                "Another Episode",                                                                "Can't Sleep?",                                                                "Rise & Shine"                                                              ]);  listBumpMsg.selection = 0;  listBumpMsg.minimumSize.width = 200;}{ // Group 4  var groupFour = myWin.add("group", undefined, "GroupFour");  groupFour.orientation = "column"  groupFour.alignChildren = "fill";  var queue_grp = groupFour.add("group", undefined, "QueueGrp");  queue_grp.minimumSize.height = 60;  queue_grp.minimumSize.width = 234;  var queue_btn = queue_grp.add("button", undefined, "Send to Queue");  queue_btn.alignment = ["center", "top"];  queue_btn.enabled = true;  try {    var icon = groupFour.add("image", undefined, "/Volumes/GFX\ Library_1/LIBRARY/SCRIPTS/Versioning_Scripts/ion_64.png", "Image");    icon.alignment = "right";  }  catch(err) {    // Can't reach image file.  }}myWin.center();myWin.show();/**********************************************************************************************************************************/**/** Application Models/**/*********************************************************************************************************************************/// Endplate Rightvar epl_r = {  show_title: { text: shows["BBD"], color: colors["BBD"][0], pos: [1538, 424, 0], scal: [71, 71, 100] },  class1: { text: "", pos: [1532, 318, 0], scal: [71, 71, 100] },  class2: { text: "", pos: [1532, 658, 0], scal: [71, 71, 100], trans: 100 },  days: [ {text: "Friday", pos: [1538, 728, 0], scal: [100, 100, 100], trans: 0},          {text: "", pos: [1538, 800, 0], scal: [100, 100, 100], trans: 0},          {text: "", pos: [1538, 852, 0], scal: [90, 90, 100], trans: 0} ],  tunein: {pos: time_db.two_line_pos, trans: 100},  title_transform: {    "BBD": {pos: [1538, 429, 0], scale: [67.45, 67.45, 100]},    "BRN": {pos: [1538, 424, 0], scale: [71, 71, 100]},    "CRM": {pos: [1538, 446, 0], scale: [55.38, 55.38, 100]},    "CSB": {pos: [1538, 446, 0], scale: [55.38, 55.38, 100]},    "GHW": {pos: [1538, 454, 0], scale: [49.7, 49.7, 100]},    "LWO": {pos: [1538, 424, 0], scale: [71, 71, 100]},    "LAO": {pos: [1538, 424, 0], scale: [71, 71, 100]},    "SVU": {pos: [1538, 424, 0], scale: [71, 71, 100]},    "LEV": {pos: [1538, 424, 0], scale: [51.12, 51.12, 100]},    "LST": {pos: [1538, 436, 0], scale: [62.48, 62.48, 100]},    "PSY": {pos: [1538, 424, 0], scale: [71, 71, 100]},    "RBL": {pos: [1538, 432, 0], scale: [65.32, 65.32, 100]},    "SVH": {pos: [1538, 429, 0], scale: [67.45, 67.45, 100]},    "WHC": {pos: [1538, 424, 0], scale: [71, 71, 100]}  },  show_class_pos: {    "BBD": [1532, 327, 0],    "BRN": [1532, 318, 0],    "CRM": [1532, 359, 0],    "CSB": [1532, 359, 0],    "GHW": [1532, 375, 0],    "LWO": [1532, 318, 0],    "LAO": [1532, 318, 0],    "SVU": [1532, 318, 0],    "LEV": [1532, 342, 0],    "LST": [1532, 341, 0],    "PSY": [1532, 318, 0],    "RBL": [1532, 333, 0],    "SVH": [1532, 327, 0],    "WHC": [1532, 318, 0]  },  set_title: function(show) {    var title_pos = epl_copy_right.layer("SHOW TITLE").position;    var title_scale = epl_copy_right.layer("SHOW TITLE").scale;    epl_copy_right.layer("SHOW TITLE").property("Source Text").setValue(shows[show]);    epl_copy_right.layer("SHOW TITLE").position.setValue(epl_r.title_transform[show].pos);    epl_copy_right.layer("SHOW TITLE").scale.setValue(epl_r.title_transform[show].scale);    // Set subtitle    if (show == "CSB") {      epl_copy_right.layer("SUBTITLE").property("Source Text").setValue(subtitles[0]);    } else if (show == "LAO") {      epl_copy_right.layer("SUBTITLE").property("Source Text").setValue(subtitles[1]);    } else if (show == "SVU") {      epl_copy_right.layer("SUBTITLE").property("Source Text").setValue(subtitles[2]);    } else epl_copy_right.layer("SUBTITLE").property("Source Text").setValue("");    // Position Show classifier    epl_copy_right.layer("CLASSIFIER").position.setValue(epl_r.show_class_pos[show]);  },  // Set classifiers  set_classifier: function(c) {    var str;    var clas_type;    if (c == listShowClass) {      clas_type = "CLASSIFIER";      str = setup_classifiers(listShowClass);    } else if (c == listTuneClass) {      str = setup_classifiers(listTuneClass);      clas_type = "CLASSIFIER 2";    }    if ( str.length >= 15 ) {      epl_copy_right.layer(clas_type).scale.setValue([68, 68, 100]);    } else epl_copy_right.layer(clas_type).scale.setValue([71, 71, 100]);    epl_copy_right.layer(clas_type).property("Source Text").setValue(str);  },  transform_tunein_classifier: function() {    epl_copy_right.layer("CLASSIFIER 2").position.setValue([1538, (epl_copy_right.layer("DAY").position.value[1]) - 70, 0]);  },  transform_tunein: function(show) {    var day_pos = [1538, 628, 0];    var day2_pos = [1538, 700, 0];    var ord1_pos = [1535, 598, 0];    var ord2_pos = [1535, 670, 0];    epl_copy_right.layer("DAY").scale.setValue([100, 100, 100]);    function ordinal_offset(day, ordinal) {      var scale_offset = 0;      (epl_copy_right.layer("DAY").scale.value[0] < 100 || epl_copy_right.layer("DAY 2").scale.value[0] < 100) ?          scale_offset = 8 : scale_offset = 0;      if (ordinal == "ST") {        return day2_pos[0] - (34 - scale_offset);      } else if (ordinal == "ND") {        return day2_pos[0] - (54 - scale_offset);      } else if (ordinal == "RD") {        return day2_pos[0] - (48 - scale_offset);      } else if (/\d1/.test(epl_copy_right.layer(day).property("Source Text").value)) {        return day2_pos[0] - (42 - scale_offset);      } else if (/\d7/.test(epl_copy_right.layer(day).property("Source Text").value)) {        return day2_pos[0] - (50 - scale_offset);      } else if (ordinal == "TH") {        return day2_pos[0] - (46 - scale_offset);      } else return 1538;    };    if (listMonth1.selection > 0) {      var ordinal1 = epl_copy_right.layer("Ordinal Suffix").property("Source Text").value;      if (epl_copy_right.layer("DAY").property("Source Text").value.toString().length >= 10) {        epl_copy_right.layer("DAY").scale.setValue([85, 85, 100]);      } else epl_copy_right.layer("DAY").scale.setValue([100, 100, 100]);      var pos_x = ordinal_offset("DAY", ordinal1);      day_pos = [pos_x, 628, 0];      epl_copy_right.layer("Ordinal Suffix").scale.setValue(epl_copy_right.layer("DAY").scale.value);      if (epl_copy_right.layer("Ordinal Suffix").scale.value[0] < 100) {        var adjust_ord1_height = ord1_pos[1] + 5;      }    }    if (listMonth2.selection > 0) {      var ordinal2 = epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").value;      var pos_x2 = ordinal_offset("DAY 2", ordinal2);      day2_pos = [pos_x2, 700, 0];      if (listMonth1.selection > 0) {        epl_copy_right.layer("DAY 2").scale.setValue(epl_copy_right.layer("DAY").scale.value);      } else if (epl_copy_right.layer("DAY 2").property("Source Text").value.toString().length >= 10) {          epl_copy_right.layer("DAY 2").scale.setValue([85, 85, 100]);      } else epl_copy_right.layer("DAY 2").scale.setValue([100, 100, 100]);      epl_copy_right.layer("Ordinal Suffix 2").scale.setValue(epl_copy_right.layer("DAY 2").scale.value);      if (epl_copy_right.layer("Ordinal Suffix 2").scale.value[0] < 100) {        var adjust_ord1_height = ord2_pos[1] + 5;      }    }    if (show == "LEV" || show == "PSY") {      epl_copy_right.layer("DAY").position.setValue(day_pos);      epl_copy_right.layer("Ordinal Suffix").position.setValue(ord1_pos);      epl_copy_right.layer("DAY 2").position.setValue(day2_pos);      epl_copy_right.layer("Ordinal Suffix 2").position.setValue(ord2_pos);      if (add_next.value && listMonth1.selection.index == 0 && listMonth2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.two_title_pos);      } else if (listMonth1.selection.index == 0 && listMonth2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.one_title_pos);      }    } else {      day_pos[1] += 100;      day2_pos[1] += 100;      ord1_pos[1] += 100;      ord2_pos[1] += 100;      epl_copy_right.layer("DAY").position.setValue(day_pos);      epl_copy_right.layer("Ordinal Suffix").position.setValue(ord1_pos);      epl_copy_right.layer("DAY 2").position.setValue(day2_pos);      epl_copy_right.layer("Ordinal Suffix 2").position.setValue(ord2_pos);      if (add_next.value && listMonth1.selection.index == 0 && listMonth2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.two_day_pos);      } else if (listMonth1.selection.index == 0 && listMonth2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.two_title_pos);      }    }    if ( listDay1.selection.index == 1 ) {      epl_copy_right.layer("DAY").scale.setValue([135, 135, 100]);    } else if (listDay3.selection.index > 0) {      epl_copy_right.layer("DAY").scale.setValue([90, 90, 100]);    }    epl_r.transform_tunein_classifier();  },  set_day: function() {    var day_str = listDay1.selection.toString().toUpperCase();    if ( add_next.value ) {      day_str = "NEXT " + day_str;    } else if (pluralize.value) {      day_str += "S";    }    function format_day(str) {      if (/ke/i.test(str) ||      		/al/i.test(str) ||      		/^next$/i.test(str) ) {        epl_copy_right.layer("Time Database").opacity.setValue(0);      } else epl_copy_right.layer("Time Database").opacity.setValue(100);      if ( /^kee/i.test(str) || /^next\s/i.test(str) ) {        var str = str.split(" ");        return str[0] + "\n" + str[1];      } else return str;      if (pluralize.value) {        str += str + "S";        return str;      } else return str;    }    if (listDay1.selection.index > 0) {      listMonth1.selection = 0;      listDayOfMonth1.selection = 0;      epl_copy_right.layer("DAY").property("Source Text").setValue(format_day(day_str));      epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("")      if (listMonth2.selection.index > 0) epl_r.set_dates(listMonth2);      epl_r.transform_tunein(listShow.selection.toString());    }  },  set_day2: function(index) {    var day2 = "";    if (index > 0) {      day2 = "& " + listDay2.selection.toString().toUpperCase();    }    epl_copy_right.layer("DAY 2").property("Source Text").setValue(day2);    epl_r.transform_xtra_days();  },  set_day3: function(index) {    var day1 = listDay1.selection.toString().toUpperCase() + ",";    var day2 = listDay2.selection.toString().toUpperCase();    var day3 = "";    if (index > 0) {      epl_copy_right.layer("DAY").property("Source Text").setValue(day1);      epl_copy_right.layer("DAY 2").property("Source Text").setValue(day2);      day3 = "& " + listDay3.selection.toString().toUpperCase();      epl_copy_right.layer("DAY 3").property("Source Text").setValue(day3);    } else {      epl_r.set_day();      epl_r.set_day2(listDay2.selection.index);      epl_copy_right.layer("DAY 3").property("Source Text").setValue(day3);    }    epl_r.transform_xtra_days();  },  set_dates: function(t) {    var date1;    var date2;    if (t.parent == firstMonthGrp) {      if (listMonth1.selection.index != 0) {        set_max_days(listMonth1.selection.index, listDayOfMonth1);        date1 = listMonth1.selection.toString().toUpperCase() + " " + listDayOfMonth1.selection.toString();        if (listMonth2.selection.index > 0) {          date2 = "& " + listMonth2.selection.toString().toUpperCase() + " " + listDayOfMonth2.selection.toString();          epl_copy_right.layer("DAY 2").property("Source Text").setValue(date2);        }        listDay1.selection = 0;        listDay2.selection = 0;        listDay3.selection = 0;        epl_copy_right.layer("DAY").property("Source Text").setValue(date1);      }    } else if (t.parent == secondMonthGrp) {      if (listMonth2.selection.index != 0) {        if (listMonth1.selection.index != 0) {          date2 = "& " + listMonth2.selection.toString().toUpperCase() + " " + listDayOfMonth2.selection.toString();        } else date2 = listMonth2.selection.toString().toUpperCase() + " " + listDayOfMonth2.selection.toString();        listDay2.selection = 0;        listDay3.selection = 0;        epl_copy_right.layer("DAY 2").property("Source Text").setValue(date2);        set_max_days(listMonth2.selection.index, listDayOfMonth2);      } else {        epl_copy_right.layer("DAY 2").property("Source Text").setValue("");      }      epl_r.transform_xtra_days();    }    function set_max_days(m, group) {      var max = 31;      switch (true) {        case (m == 2) :          max = 28;          break;        case (m % 2 == 0 && m <= 7) :          max = 30;          break;        case (m % 2 == 1 && m > 7 && m < 13) :          max = 30;          break;        default : max = 31;      }      if (max == 28 && new Date(Date(0)).getFullYear() == 2020) max = 29;      // Adjust selection if out of bounds.      if ((parseInt(group.selection) + 1) > max) {        group.selection = max - 1;      }      var delta = group.items.length - max;      if (delta != 0) {        if (delta > 0) {          for (var i = group.items.length - 1; i >= max; i--) {            group.remove(group.items[i]);          }        } else if (delta < 0) {          for (var j = group.items.length; j < max; j++) {            group.add("item", j + 1);          }        }      }    }    // Set Oridinal Suffix    var first = /[^1(?=[0-9])]|^1$|[2-3][1]/g;    var second = /[^[1][2]]|^2$|[2-3][2]/g;    var third = /[^[1][3]|^3$|[2][3]]/g;    var ordinal1 = listDayOfMonth1.selection.toString();    var ordinal2 = listDayOfMonth2.selection.toString();    if (listMonth1.selection.index == 0) {      epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("");    } else if (first.test(ordinal1)) {      epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("ST");    } else if (second.test(ordinal1)) {      epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("ND");    } else if (third.test(ordinal1)) {      epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("RD");    } else epl_copy_right.layer("Ordinal Suffix").property("Source Text").setValue("TH");    if (listMonth2.selection.index == 0) {      epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").setValue("");    } else if (first.test(ordinal2)) {      epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").setValue("ST");    } else if (second.test(ordinal2)) {      epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").setValue("ND");    } else if (third.test(ordinal2)) {      epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").setValue("RD");    } else epl_copy_right.layer("Ordinal Suffix 2").property("Source Text").setValue("TH");    epl_r.transform_tunein(listShow.selection.toString());  },  transform_xtra_days: function() {    if ( listShow.selection.toString() == "LEV" || listShow.selection.toString() == "PSY" ) {      if (listDay2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.one_title_pos);      } else if (listDay3.selection.index == 0) {        epl_copy_right.layer("DAY").scale.setValue([100, 100, 0]);        epl_copy_right.layer("DAY 2").position.setValue([1538, 700, 0]);        epl_copy_right.layer("DAY 2").scale.setValue([100, 100, 0]);        epl_copy_right.layer("Time Database").position.setValue(time_db.two_title_pos);        epl_copy_right.layer("Time Database").opacity.setValue(100);      } else if (listDay3.selection.index > 0) {        epl_copy_right.layer("DAY").scale.setValue([90, 90, 0]);        epl_copy_right.layer("DAY 2").position.setValue([1538, 690, 0]);        epl_copy_right.layer("DAY 2").scale.setValue([90, 90, 0]);        epl_copy_right.layer("DAY 3").position.setValue([1538, 752, 0]);        epl_copy_right.layer("DAY 3").scale.setValue([90, 90, 0]);        epl_copy_right.layer("Time Database").opacity.setValue(0);      }    } else {      if (listMonth2.selection.index > 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.two_day_pos);        epl_copy_right.layer("Time Database").opacity.setValue(100);      } else if (listDay2.selection.index == 0) {        epl_copy_right.layer("Time Database").position.setValue(time_db.two_title_pos);        epl_copy_right.layer("Time Database").opacity.setValue(100);      } else if (listDay3.selection.index == 0) {        epl_copy_right.layer("DAY").scale.setValue([100, 100, 0]);        epl_copy_right.layer("DAY 2").position.setValue([1538, 800, 0]);        epl_copy_right.layer("DAY 2").scale.setValue([100, 100, 0]);        epl_copy_right.layer("Time Database").position.setValue(time_db.two_day_pos);        epl_copy_right.layer("Time Database").opacity.setValue(100);      } else {        epl_copy_right.layer("DAY").scale.setValue([90, 90, 0]);        epl_copy_right.layer("DAY 2").position.setValue([1538, 790, 0]);        epl_copy_right.layer("DAY 2").scale.setValue([90, 90, 0]);        epl_copy_right.layer("DAY 3").position.setValue([1538, 852, 0]);        epl_copy_right.layer("DAY 3").scale.setValue([90, 90, 0]);        epl_copy_right.layer("Time Database").opacity.setValue(0);      }    }  },  set_colors: function(show) {    epl_copy_right.layer("SHOW TITLE").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_copy_right.layer("SUBTITLE").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_r_8_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_8_sub.layer("BG Light 2").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_8_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_r_8_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    epl_r_10_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_10_sub.layer("BG Light 2").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_10_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_r_10_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    epl_r_6_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_6_sub.layer("BG Light 2").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_6_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_r_6_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    epl_r_5_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_5_sub.layer("BG Light 2").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_r_5_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_r_5_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);  }};// Endplate Fullvar epl_full = {  set_colors: function(show) {    epl_full_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_full_sub.layer("BG Light 2").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_full_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_full_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);  }};// Endplate Leftvar epl_l = {  set_colors: function(show) {    epl_l_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    epl_l_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    epl_l_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);  }};// Talent Bumpervar bmp_tal = {  set_colors: function(show) {    bmp_tal_sub.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    bmp_tal_sub.layer("Square").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    bmp_tal_sub.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    bmp_tal_sub.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    bmp_tal_sub.layer("BG Light Gray").property("Effects").property("Fill").property("Color").setValue([colors[show][2][0] * 1.5,                                                                                                        colors[show][2][1] * 1.5,                                                                                                        colors[show][2][2] * 1.5,                                                                                                        colors[show][2][3]]);    bmp_trans.layer("Color Light").source.mainSource.color = [                                                              colors[show][0][0],                                                              colors[show][0][1],                                                              colors[show][0][2]                                                              ];    bmp_trans.layer("Color Mid").source.mainSource.color = [                                                              colors[show][1][0],                                                              colors[show][1][1],                                                              colors[show][1][2]                                                              ];  },  transform_bmp_msg: function(msg) {    // Line 1 -- Home Pos = (1261, 438), Scale = (110, 110)    bmp_tal_msg.layer("Callout Line 1").position.setValue([1261, 438, 0]);    bmp_tal_msg.layer("Callout Line 1").scale.setValue([110, 110, 100]);    bmp_tal_msg.layer("Callout Line 2").position.setValue([1261, 534, 0]);    bmp_tal_msg.layer("Callout Line 2").scale.setValue([110, 110, 100]);    if ( /keep/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1365, 438, 0]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1265, 524, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([99, 99, 100]);    } else if ( /anot/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1253, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([93.5, 93.5, 100]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1301, 531, 0]);    } else if ( /\d/.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1245, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([88, 88, 100]);    } else if ( /da/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 2").position.setValue([1254, 538, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([121.1, 121.1, 100]);    } else if ( /new/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 2").position.setValue([1257, 524, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([102.3, 102.3, 100]);    } else if ( /bac/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1346, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([110, 110, 100]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1285, 534, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([110, 110, 100]);    } else if ( /orig/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1248, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([95, 95, 100]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1356, 534, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([110, 110, 100]);    } else if ( /^premiere$/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1252, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([93, 93, 100]);    } else if ( /rise/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1304, 438, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([120, 120, 100]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1304, 538, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([110, 110, 100]);    } else if ( /can/i.test(msg) ) {      bmp_tal_msg.layer("Callout Line 1").position.setValue([1175, 430, 0]);      bmp_tal_msg.layer("Callout Line 1").scale.setValue([96, 96, 100]);      bmp_tal_msg.layer("Callout Line 2").position.setValue([1309, 534, 0]);      bmp_tal_msg.layer("Callout Line 2").scale.setValue([125, 125, 100]);    }  },  set_bump_msg: function() {    var msg = add_season_no(listBumpMsg);    var line1 = msg.split(" ");    var line2;    if ( /\s{1,}/.test( msg ) ) {      if ( /\d{1,}\s\D+/i.test( msg ) ){        bmp_tal_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + " " + line1[1]);        bmp_tal_msg.layer("Callout Line 2").property("Source Text").setValue(line1[2]);        whc_bmp_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + " " + line1[1]);        whc_bmp_msg.layer("Callout Line 2").property("Source Text").setValue(line1[2]);      } else if ( /\d{1,}/.test( msg ) ) {        bmp_tal_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + " " + line1[1]);        bmp_tal_msg.layer("Callout Line 2").property("Source Text").setValue("");        whc_bmp_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + " " + line1[1]);        whc_bmp_msg.layer("Callout Line 2").property("Source Text").setValue("");      } else if ( /rise/i.test( msg ) ){        bmp_tal_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + "\n" + line1[2]);        bmp_tal_msg.layer("Callout Line 2").property("Source Text").setValue(line1[1]);        whc_bmp_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0] + "\n" + line1[2]);        whc_bmp_msg.layer("Callout Line 2").property("Source Text").setValue(line1[1]);      } else {        bmp_tal_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0]);        whc_bmp_msg.layer("Callout Line 1").property("Source Text").setValue(line1[0]);        (line1.length > 2) ? line2 = line1[1] + " " + line1[2] : line2 = line1[1];        bmp_tal_msg.layer("Callout Line 2").property("Source Text").setValue(line2);        whc_bmp_msg.layer("Callout Line 2").property("Source Text").setValue(line2);      }    } else {      bmp_tal_msg.layer("Callout Line 1").property("Source Text").setValue((msg != null) ? msg : "");      bmp_tal_msg.layer("Callout Line 2").property("Source Text").setValue("");      whc_bmp_msg.layer("Callout Line 1").property("Source Text").setValue((msg != null) ? msg : "");      whc_bmp_msg.layer("Callout Line 2").property("Source Text").setValue("");    }    bmp_tal.transform_bmp_msg(msg);    spec_whc_bmp.transform_bmp_msg(msg);  }};var spec_whc_bmp = {  transform_bmp_msg: function(msg) {    // Home Pos    var pos1 = [556, 360, 0];    var scale1 = [37,37, 100];    var pos2 = [405, 460, 0];    var scale2 = [37,37, 100];    if ( /keep/i.test(msg) ) { // Keep Watching      pos1 = [556, 360, 0];      scale1 = [37,37, 100];      pos2 = [405, 460, 0];      scale2 = [37,37, 100];    } else if ( /anot/i.test(msg) ) { // Another Episode      pos1 = [704, 360, 0];      scale1 = [37,37, 100];      pos2 = [396, 460, 0];      scale2 = [37,37, 100];    } else if ( /^premiere$/i.test(msg) ) { // Premiere      pos1 = [708, 360, 0];      scale1 = [37,37, 100];    } else if ( /\d{1,}\sprem/i.test(msg) ) { // Season No. Premiere      pos1 = [711, 360, 0];      scale1 = [37,37, 100];      pos2 = [396, 460, 0];      scale2 = [37,37, 100];    } else if ( /\sprem/i.test(msg) ) { // Season Premiere      pos1 = [656, 360, 0];      scale1 = [37,37, 100];      pos2 = [396, 460, 0];      scale2 = [37,37, 100];    } else if ( /\d/.test(msg) ) { // Season No.      pos1 = [712, 360, 0];      scale1 = [37,37, 100];    } else if ( /nex/i.test(msg) ) { // Next      pos1 = [656, 360, 0];      scale1 = [50,50, 100];    } else if ( /all/i.test(msg) ) { // All Day, All New      pos1 = [517, 360, 0];      scale1 = [37,37, 100];      pos2 = [396, 460, 0];      scale2 = [37,37, 100];    } else if ( /bac/i.test(msg) ) { // Back to Back      pos1 = [569, 360, 0];      scale1 = [37,37, 100];      pos2 = [405, 460, 0];      scale2 = [37,37, 100];    } else if ( /orig/i.test(msg) ) { // Original Series      pos1 = [704, 360, 0];      scale1 = [37,37, 100];      pos2 = [400, 460, 0];      scale2 = [37,37, 100];    } else if ( /rise/i.test(msg) ) { // Rise & Shine      pos1 = [594, 360, 0];      scale1 = [37,37, 100];      pos2 = [546, 460, 0];      scale2 = [35,35, 100];    } else if ( /can/i.test(msg) ) { // Can't Sleep      pos1 = [592, 360, 0];      scale1 = [37,37, 100];      pos2 = [400, 460, 0];      scale2 = [37,37, 100];    }    whc_bmp_msg.layer("Callout Line 1").position.setValue(pos1);    whc_bmp_msg.layer("Callout Line 1").scale.setValue(scale1);    whc_bmp_msg.layer("Callout Line 2").position.setValue(pos2);    whc_bmp_msg.layer("Callout Line 2").scale.setValue(scale2);  }};var l3d = {  set_colors: function(show) {    l3d_title.layer("SHOW TITLE").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    l3d_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(3.4, [0.90, 0.90, 0.90, 1]);    l3d_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(3.9, colors[show][0]);    l3d_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(15.1, colors[show][0]);    l3d_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(15.6, [0.90, 0.90, 0.90, 1]);  },  set_title: function(show) {    l3d_title.layer("SHOW TITLE").property("Source Text").setValue(shows_one_line[show]);    this.animate_title();  },  set_classifier: function(c) {    var l3d_clas = add_season_no(listShowClass);    l3d_title.layer("CLASSIFIER").property("Source Text").setValue(l3d_clas);  },  set_tunein: function() {    var day1 = listDay1.selection.toString().toUpperCase();    var day2 = listDay2.selection.toString().toUpperCase();    var day3 = listDay3.selection.toString().toUpperCase();    var date1 = listMonth1.selection.toString().toUpperCase() + " " +                listDayOfMonth1.selection.toString();    var date2 = listMonth2.selection.toString().toUpperCase() + " " +                listDayOfMonth2.selection.toString();    var num = 1;    if (add_next.value) day1 = "NEXT " + day1;    if (pluralize.value) {      day1 += "S";      day2 += "S";      day3 += "S";    }    function set_day1() {      if (listDay1.selection > 0) {        if ((listDay1.selection > 1 && listDay1.selection < 14) || listMonth1.selection > 0) {          l3d_tunein.layer("Day 1").property("Source Text").setValue(day1 + " " + master_time_txt);        } else l3d_tunein.layer("Day 1").property("Source Text").setValue(day1);      } else if (listMonth1.selection > 0) {          l3d_tunein.layer("Day 1").property("Source Text").setValue(date1 + " " + master_time_txt);      }    }    function set_day2() {      if (listDay2.selection > 0 && listDay3.selection == 0) {        l3d_tunein.layer("Day 2").property("Source Text").setValue("& " + day2 + " " + master_time_txt);        num = 2;      } else if (listDay2.selection > 0 && listDay3.selection > 0) {        l3d_tunein.layer("Day 2").property("Source Text").setValue(day2 + " " + master_time_txt);        num = 2;      } else if (listDay2.selection == 0) {        if (listMonth2.selection > 0 && listDay1.selection == 0) {          l3d_tunein.layer("Day 2").property("Source Text").setValue("& " + date2 + " " + master_time_txt);          num = 2;        } else if (listMonth2.selection > 0 && listDay1.selection > 0) {          l3d_tunein.layer("Day 2").property("Source Text").setValue(date2 + " " + master_time_txt);          num = 2;        }      }    }    function set_day3() {      if (listDay3.selection > 0) {        l3d_tunein.layer("Day 3").property("Source Text").setValue("& " + day3 + " " + master_time_txt);        num = 3;      }    }    set_day1();    set_day2();    set_day3();    this.animate_tunein(num);  },  animate_title: function(num) {    // Initialize layer    var x = 580;    var lin = KeyframeInterpolationType.LINEAR;    var bez = KeyframeInterpolationType.BEZIER;    init();    // Out    l3d_master.layer("Show Title element").property("Position").setValueAtTime(4, [x, 540]);    l3d_master.layer("Show Title element").property("Position").setValueAtTime(4.5, [960, 540]);    if (!webChk.value) {      // Up      l3d_master.layer("Show Title element").property("Position").setValueAtTime(5.5, [960, 540]);      l3d_master.layer("Show Title element").property("Position").setValueAtTime(5.76667, [960, 514]);      // Down      l3d_master.layer("Show Title element").property("Position").setValueAtTime(13.23334, [960, 514]);      l3d_master.layer("Show Title element").property("Position").setValueAtTime(13.5, [960, 540]);    }    // In    l3d_master.layer("Show Title element").property("Position").setValueAtTime(14.5, [960, 540]);    l3d_master.layer("Show Title element").property("Position").setValueAtTime(15, [x, 540]);    for (var i = l3d_master.layer("Show Title element").property("Position").numKeys; i != 0; i--) {      if (i % 2 == 0) {        l3d_master.layer("Show Title element").property("Position").setInterpolationTypeAtKey(i, bez, lin);      } else l3d_master.layer("Show Title element").property("Position").setInterpolationTypeAtKey(i, lin, bez);    }    function init() {      var param = l3d_master.layer("Show Title element").property("Position");      var title = l3d_title.layer("SHOW TITLE").property("Source Text").value.toString();      for (var i = param.numKeys; i != 0; i--) {        param.removeKey(i);      }      if ( /susp/i.test(title)        || /inten/i.test(title)        || /victim/i.test(title)) x = 260;    }  },  animate_tunein: function(num) {    init();    var lin = KeyframeInterpolationType.LINEAR;    var bez = KeyframeInterpolationType.BEZIER;    if (num > 1) {      l3d_master.layer("Tune-in element").property("Position").setValueAtTime(8, [960, 540]);      l3d_master.layer("Tune-in element").property("Position").setValueAtTime(8.5, [960, 488]);    }    if (num == 3) {      l3d_master.layer("Tune-in element").property("Position").setValueAtTime(10.5, [960, 488]);      l3d_master.layer("Tune-in element").property("Position").setValueAtTime(11, [960, 436]);    }    for (var i = l3d_master.layer("Tune-in element").property("Position").numKeys; i != 0; i--) {      if (i % 2 == 0) {        l3d_master.layer("Tune-in element").property("Position").setInterpolationTypeAtKey(i, bez, lin);      } else l3d_master.layer("Tune-in element").property("Position").setInterpolationTypeAtKey(i, lin, bez);    }    function init() {      var param = l3d_master.layer("Tune-in element").property("Position");      for (var i = param.numKeys; i != 0; i--) {        param.removeKey(i);      }    }  }};var bug = {  set_colors: function(show) {    var lin = KeyframeInterpolationType.LINEAR;    var bez = KeyframeInterpolationType.BEZIER;    var hold = KeyframeInterpolationType.HOLD;    color_wave.layer("Segment1").property("Effects").property("Fill").property("Color").setValueAtTime(11, colors[show][2]);    color_wave.layer("Segment1").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(1, hold, hold);    color_wave.layer("Segment1").property("Effects").property("Fill").property("Color").setValueAtTime(12.5, colors[show][0]);    color_wave.layer("Segment2").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    color_wave.layer("Segment3").property("Effects").property("Fill").property("Color").setValueAtTime(11, colors[show][0]);    color_wave.layer("Segment3").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(1, hold, hold);    color_wave.layer("Segment3").property("Effects").property("Fill").property("Color").setValueAtTime(12.5, colors[show][2]);    bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(1, colors[show][0]);    bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(1.75, [0.90, 0.90, 0.90, 1]);    bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(12.75, [0.90, 0.90, 0.90, 1]);    bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(13.5, colors[show][0]);    bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(1, colors[show][0]);    bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(1.75, [0.90, 0.90, 0.90, 1]);    bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(12.75, [0.90, 0.90, 0.90, 1]);    bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setValueAtTime(13.5, colors[show][0]);    for (var i = bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").numKeys; i != 0; i--) {      if (i % 2 == 0) {        bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(i, bez, lin);        bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(i, bez, lin);      } else {        bug_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(i, lin, bez);        bug_right_master.layer("Dot 2").property("Effects").property("Fill").property("Color").setInterpolationTypeAtKey(i, lin, bez);      }    }  }};var transition = {  set_colors: function(show) {    dot_color.layer("Shape1").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    dot_color.layer("Shape2").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    dot_color.layer("Shape3").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    logo_color.layer("Shape1").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    logo_color.layer("Shape2").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    logo_color.layer("Shape3").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    logo_color.layer("Shape4").property("Effects").property("Fill").property("Color").setValue([0.9, 0.9, 0.9, 1]);    trans1_color.layer("PRIMARY_COLOR").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    trans1_color.layer("SECONDARY_COLOR").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    trans1_gray.layer("PRIMARY_COLOR").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    trans1_gray.layer("SECONDARY_COLOR").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);  }};var billboard = {  set_colors: function(show) {    color_corner.layer("Corner").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    gray_corner.layer("Corner").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);  }};var opn = {  set_colors: function(show) {    opn_call.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    opn_call.layer("BG Mid").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    opn_call.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    opn_call.layer("Logo Dot").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    title_a.layer("SHOW TITLE").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    title_a.layer("SUBTITLE").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    call.layer("Callout").property("Effects").property("Fill").property("Color").setValue(colors[show][1]);    opn_master.layer("BG Dark").property("Effects").property("Fill").property("Color").setValue(colors[show][2]);    opn_master.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);    opn_intro.layer("BG Light").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);  },  set_title: function(show) {    title_a.layer("SHOW TITLE").property("Source Text").setValue(shows[show]);    title_b.layer("SHOW TITLE").property("Source Text").setValue(shows[show]);    opn_intro.layer("SHOW TITLE").property("Source Text").setValue(shows[show]);    this.set_subtitle();    this.set_pos(shows[show].split("\n").length);  },  set_subtitle: function() {    var subTitle = "";    if (listShow.selection.toString() == "CSB") {      subTitle = subtitles[0];    } else if (listShow.selection.toString() == "LAO") {      subTitle = subtitles[1];    } else if (listShow.selection.toString() == "SVU") {      subTitle = subtitles[2];    }    title_a.layer("SUBTITLE").property("Source Text").setValue(subTitle);    title_b.layer("SUBTITLE").property("Source Text").setValue(subTitle);    opn_intro.layer("SUBTITLE").property("Source Text").setValue(subTitle);  },  set_pos: function(count) {    var pos = [960, 850, 0];    if (count == 1) {      pos[1] = 900;    }    if (title_b.layer("SUBTITLE").property("Source Text").value != "") {      pos[1] = 785;    }    title_a.layer("SHOW TITLE").position.setValue(pos);    title_b.layer("SHOW TITLE").position.setValue(pos);    opn_intro.layer("SHOW TITLE").position.setValue(pos);  },  set_callout: function() {    var callout = "";    var day = listDay1.selection.toString().toUpperCase();    var line_count = 1;    if (listDay1.selection > 0 && /\s/.test(day)) {      day = day.split(" ");      callout = day[0] + "\n" + day[1];      line_count = 2;    } else if (listDay1.selection > 0 && !/\s/.test(day)) {      callout = day;    }    if (pluralize.value) callout += "S";    if (add_next.value) {      callout = "NEXT\n" + callout;      line_count = 2;    }    call.layer("Callout").property("Source Text").setValue(callout);    set_pos(line_count);    function set_pos(count) {      var pos = [960, 594, 0];      if (count == 2) pos[1] = 524;      call.layer("Callout").position.setValue(pos);    }  }};/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////**********************************************************************************************************************************/**/** Helper functions./**/*********************************************************************************************************************************/function set_colors(show) {  epl_r.set_colors(show);  epl_full.set_colors(show);  epl_l.set_colors(show);  bmp_tal.set_colors(show);  l3d.set_colors(show);  bug.set_colors(show);  transition.set_colors(show);  billboard.set_colors(show);  opn.set_colors(show);}// Set all talent layersfunction set_talent(show) {  var re = new RegExp(show);  for (var i = 1; i <= epl_r_talent.layers.length; i++) {    if (epl_r_talent.layer(i).name == show) {      epl_r_talent.layer(i).opacity.setValue(100);    } else epl_r_talent.layer(i).opacity.setValue(0);    if (epl_l_talent.layer(i).name == show) {      epl_l_talent.layer(i).opacity.setValue(100);    } else epl_l_talent.layer(i).opacity.setValue(0);    if (epl_full_talent.layer(i).name == show) {      epl_full_talent.layer(i).opacity.setValue(100);    } else epl_full_talent.layer(i).opacity.setValue(0);    if (re.test(bmp_talent_front.layer(i).name)) {      bmp_talent_front.layer(i).opacity.setValue(100);      bmp_talent_back.layer(i).opacity.setValue(100);    } else {      bmp_talent_front.layer(i).opacity.setValue(0);      bmp_talent_back.layer(i).opacity.setValue(0);    }  }}// Set Hero Logo Colorsfunction set_logo_style(show) {  // TODO Replace comp with Solid  // app.project.item(1).layer(1).source.mainSource.color = [0, 1, 0];  hero_logo.layer("ION Dot").property("Effects").property("Fill").property("Color").setValueAtTime(2.1667, colors[show][0]);  hero_logo.layer("ION Dot").property("Effects").property("Fill").property("Color").setValueAtTime(2.6667, [0.90, 0.90, 0.90, 1]);  hero_logo_rev.layer("ION Dot").property("Effects").property("Fill").property("Color").setValueAtTime(2.1667, colors[show][0]);  hero_logo_rev.layer("ION Dot").property("Effects").property("Fill").property("Color").setValueAtTime(2.6667, [0.90, 0.90, 0.90, 1]);  hero_logo4s.layer("ION Dot").property("Effects").property("Fill").property("Color").setValue(colors[show][0]);  set_logo_bg(show);}function set_logo_bg(show) {  if (logo_radio1.value) {    hero_logo.layer("Hero Logo BG").source.mainSource.color = [                                                                colors[show][1][0],                                                                colors[show][1][1],                                                                colors[show][1][2]                                                              ];  } else if (logo_radio2) {    hero_logo.layer("Hero Logo BG").source.mainSource.color = [                                                                colors[show][2][0],                                                                colors[show][2][1],                                                                colors[show][2][2]                                                              ];  }}// Format Classifier Stringsfunction setup_classifiers(c) {  // Set layout of classifier string  function format_show_classifier(str) {    var classifier = "";    var class_parts = str.split(" ");    if (str == null || str == "") {      return "";    } else if (str.length <= 15) {      return "\n" + str;    } else if (/\d{1,2}/g.test(str) && class_parts.length == 3) {      return class_parts[0] + " " + class_parts[1] + "\n" + class_parts[2];    } else if (class_parts.length == 2) {      return class_parts[0] + "\n" + class_parts[1];    } else if (class_parts.length == 3) {      return class_parts[0] + "\n" + class_parts[1] + " " + class_parts[2];    } else if (class_parts.length == 4) {      return class_parts[0] + " " + class_parts[1] + "\n" + class_parts[2] + " " + class_parts[3];    } else return "Error:  too long";  }  // Go get season number.  return format_show_classifier(add_season_no(c));}// Add season number if applicablefunction add_season_no(c) {  var s_num = season.text;  var c_str = "";  if (c.selection == null) {    c_str = "";  } else (c.selection.index > 0) ? c_str = c.selection.toString().toUpperCase() : c_str = "";  // if (c.selection.index > 0) {    if (/^sea/i.test(c_str) && !(/\sprem/i.test(c_str)) && s_num != 0) {      c_str += " " + s_num.toString();    } else if (/^sea/i.test(c_str) && !(/\sprem/i.test(c_str)) && s_num == 0) {      c_str = "";    } else if (/\sprem/i.test(c_str)) {      var match = c_str.split(" ");      (s_num > 0) ? c_str = match[0] + " " + s_num + " " + match[1] : match[0] + " " + match[1];    }    return c_str;  // } else return "";}/**********************************************************************************************************************************/**/** Application Controller/**/*********************************************************************************************************************************/// Set default state// Un-Web Mode itepl_copy_right.layer("DAY").opacity.setValue(100);epl_copy_right.layer("Time Database").opacity.setValue(100);l3d_master.layer("Tune-in element").opacity.setValue(100);l3d.animate_title();// Showfunction show_change() {  master_record.set_show();  var show = listShow.selection.toString(); // refactor this out  set_colors(show);  epl_r.set_title(show);  epl_r.transform_tunein(show);  set_talent(show);  set_logo_style(show);  epl_r.transform_xtra_days();  l3d.set_title(show);  opn.set_title(show);}listShow.addEventListener("change", show_change);// Hero Logo Stylefunction logo_radios_onClick() {  master_record.set_img();  set_logo_bg(listShow.selection.toString());}logo_radio1.onClick = logo_radios_onClick;logo_radio2.onClick = logo_radios_onClick;// Tune-inlistDay1.onChange = function () {  if (listDay1.selection.index > 1 && listDay1.selection.index < 9) {    add_next.enabled = true;    pluralize.enabled = true;  } else {    add_next.enabled = false;    add_next.value = false;    pluralize.enabled = false;    pluralize.value = false;  }  if (listDay1.selection.index > 1 && listDay1.selection.index < 10) {    listDay2.enabled = true;  } else {    listDay2.selection = 0;    listDay2.enabled = false;  }  epl_r.set_day();  l3d.set_tunein();  opn.set_callout();  master_record.set_day();};listDay2.onChange = function () {  if (listDay2.selection.index > 0 && listDay2.selection.index < 9) {    listDay3.enabled = true;  } else {    listDay3.selection = 0;    listDay3.enabled = false;  }  epl_r.set_day2(listDay2.selection.index);  l3d.set_tunein();  master_record.set_day();};listDay3.onChange = function () {  epl_r.set_day3(listDay3.selection.index);  l3d.set_tunein();  master_record.set_day();};add_next.onClick = function () {  if (add_next.value) {    pluralize.enabled = false;  } else pluralize.enabled = true;  epl_r.set_day();  l3d.set_tunein();  opn.set_callout();};pluralize.onClick = function () {  if (pluralize.value) {    add_next.enabled = false;  } else add_next.enabled = true;  epl_r.set_day();  l3d.set_tunein();  opn.set_callout();};webChk.onClick = function () {  if ( webChk.value ) {    epl_copy_right.layer("DAY").opacity.setValue(0);    epl_copy_right.layer("Time Database").opacity.setValue(0);    listDay1.enabled = false;    listDay2.enabled = false;    listDay3.enabled = false;    listMonth1.enabled = false;    listMonth2.enabled = false;    listDayOfMonth1.enabled = false;    listDayOfMonth2.enabled = false;    add_next.enabled = false;    pluralize.enabled = false;    listTime.enabled = false;    half_hour.enabled = false;    am.enabled = false;    listTuneClass.enabled = false;    season.enabled = false;    slider.enabled = false;    l3d_master.layer("Tune-in element").opacity.setValue(0);  } else {    epl_copy_right.layer("DAY").opacity.setValue(100);    epl_copy_right.layer("Time Database").opacity.setValue(100);    listDay1.enabled = true;    listDay2.enabled = true;    listDay3.enabled = true;    listMonth1.enabled = true;    listMonth2.enabled = true;    listDayOfMonth1.enabled = true;    listDayOfMonth2.enabled = true;    add_next.enabled = true;    pluralize.enabled = true;    listTime.enabled = true;    half_hour.enabled = true;    am.enabled = true;    listTuneClass.enabled = true;    season.enabled = true;    slider.enabled = true;    l3d_master.layer("Tune-in element").opacity.setValue(100);  }  l3d.animate_title();}// DatesfirstMonthGrp.addEventListener('change', function (e) {  epl_r.set_dates(e.target);  l3d.set_tunein();  master_record.set_date1();});secondMonthGrp.addEventListener('change', function (e) {  epl_r.set_dates(e.target);  l3d.set_tunein();  master_record.set_date2();});// Set Timefunction setTime() {  for (var i = 1; i <= 25; i++) {    if ( i != 13 ) {      time_db.comp.layer(i).opacity.setValue(0);    } else time_db.comp.layer(13).opacity.setValue(100);  }  var layer_index = listTime.selection.index;  if (layer_index == 0) layer_index += 1;  if (half_hour.value) {    layer_index += 13;  }  time_db.comp.layer(layer_index).opacity.setValue(100);  master_time_txt = time_db.comp.layer(layer_index).property("Source Text").value.toString().toLowerCase() + " " + time_db.comp.layer(13).property("Source Text").value.toString();  if (/30/.test(master_time_txt)) master_time_txt = master_time_txt.replace(/30/g, ":30");  l3d.set_tunein();}function set_day_part() {  if (am.value) {    time_db.comp.layer(13).property("Source Text").setValue("AM");  } else time_db.comp.layer(13).property("Source Text").setValue("PM");  var update_master_time = master_time_txt.split(" ")[0] + " " + time_db.comp.layer(13).property("Source Text").value.toString();  master_time_txt = update_master_time;  l3d.set_tunein();}// listTime.addEventListener('change', setTime);listTime.addEventListener('change', function(e) {  setTime();  master_record.set_time("time");});// half_hour.onClick = setTime;half_hour.onClick = function () {  setTime();  master_record.set_time("time");};// am.onClick = set_day_part;am.onClick = function () {  set_day_part;  master_record.set_time("day");};// Slider Eventsfunction season_changing() {  slider.value = parseInt(season.text);  if (isNaN(season.text)) {    season.text = 0;  }}slider.addEventListener('changing', function (e) {  season.text = Math.floor(slider.value);  season_changing();});function season_change() {  if (listShowClass.selection.index == 1 || listShowClass.selection.index == 4) {    epl_r.set_classifier(listShowClass);    l3d.set_classifier(listShowClass);  }  if (listTuneClass.selection.index == 1 || listTuneClass.selection.index == 4) {    epl_r.set_classifier(listTuneClass);  }  if (listBumpMsg.selection.index == 1 || listBumpMsg.selection.index == 3) bmp_tal.set_bump_msg();}slider.onChange = season_change;season.onChange = function () {  season_changing();  season_change();};// Just one Season classifier will dofunction there_can_be_only_one(on_items, off_items) {  off_items[1].enabled = true;  off_items[2].enabled = true;  off_items[3].enabled = true;  off_items[4].enabled = true;  if (on_items == 1) {    off_items[1].enabled = false;    off_items[4].enabled = false;  } else if (on_items == 4) {    off_items[1].enabled = false;    off_items[2].enabled = false;    off_items[3].enabled = false;    off_items[4].enabled = false;  } else if (on_items == 2 || on_items == 3) {    off_items[2].enabled = false;    off_items[3].enabled = false;    off_items[4].enabled = false;  }}classifierPanel.addEventListener("change", function (e) {  e.stopPropagation();  if (e.target == listShowClass) {    there_can_be_only_one(e.target.selection.index, listTuneClass.items);    epl_r.set_classifier(e.target);    l3d.set_classifier(listShowClass.selection.toString().toUpperCase());  } else if (e.target == listTuneClass) {    there_can_be_only_one(e.target.selection.index, listShowClass.items);    epl_r.set_classifier(e.target);  }});// Bump MessagelistBumpMsg.addEventListener("change", function (e) {  bmp_tal.set_bump_msg();});// Add to queuequeue_btn.onClick = function() {  queue_master.create_job();};//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  One object to rule them all./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////var master_record = {  show: "BBD",  img: false,  day1: "Friday",  day2: "",  day3: "",  date1: "",  date2: "",  time: "8/9c PM",  set_show: function () {    this.show = listShow.selection.toString();  },  set_img: function () {    this.img = logo_radio2.value;  },  set_day: function () {    (listDay1.selection > 0) ? this.day1 = listDay1.selection.toString() : this.day1 = "";    (listDay2.selection > 0) ? this.day2 = listDay2.selection.toString() : this.day2 = "";    (listDay3.selection > 0) ? this.day3 = listDay3.selection.toString() : this.day3 = "";  },  set_date1: function () {    (listMonth1.selection > 0) ? this.date1 = listMonth1.selection.toString() + " " + listDayOfMonth1.selection.toString() : this.date1 = "";    this.day1 = "";    this.day2 = "";    this.day3 = "";  },  set_date2: function () {    (listMonth2.selection > 0) ? this.date2 = listMonth2.selection.toString() + " " + listDayOfMonth2.selection.toString() : this.date2 = "";    if (this.date1 == "") {      this.day2 = "";      this.day3 = "";    }  },  set_time: function (time_or_day) {    if (time_or_day == "time") {      setTime();    } else if (time_or_day == "day") {      set_day_part();    }    function setTime() {      for (var i = 1; i <= 25; i++) {        if ( i != 13 ) {          time_db.comp.layer(i).opacity.setValue(0);        } else time_db.comp.layer(13).opacity.setValue(100);      }      var layer_index = listTime.selection.index;      if (layer_index == 0) layer_index += 1;      if (half_hour.value) {        layer_index += 13;      }      time_db.comp.layer(layer_index).opacity.setValue(100);      master_record.time = time_db.comp.layer(layer_index).property("Source Text").value.toString().toLowerCase() + " " + time_db.comp.layer(13).property("Source Text").value.toString();      if (/30/.test(master_record.time)) master_record.time = master_record.time.replace(/30/g, ":30");    }    function set_day_part() {      if (am.value) {        time_db.comp.layer(13).property("Source Text").setValue("AM");      } else time_db.comp.layer(13).property("Source Text").setValue("PM");      master_record.time = master_record.time.split(" ")[0] + " " + time_db.comp.layer(13).property("Source Text").value.toString();    }  }};////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Queue Systemvar queue_master = {  projQueue: app.project.renderQueue,  queueItem: 1,  product: "",  version: "",  job_filename: "",  set_queueItem: function () {    this.queueItem = (this.projQueue.numItems == 0) ? 1 : this.projQueue.numItems + 1;  },  create_job: function () {    // First test to see if we have a valid comp to render.  If we do, then    // construct file name, make a job folder if necessary, and add to queue.    if (/\smaster/i.test(app.project.activeItem.name)) {      this.set_job_filename();      if (job_num.text != "" || ( job_num.text == "" &&        (confirm("Warning: No Job No. Entered\nContinue anyway?\nFile will be saved to root of _APPROVALS_smartsheet.")) )) {          var job_path = "/Volumes/GFX Delivery_1/_APPROVALS_smartsheet/" + job_num.text;          var job_folder = Folder (job_path);          var job_file = File (job_path + "/" + this.job_filename);          queue_master.set_queueItem();          job_folder.create();          this.projQueue.items.add(app.project.activeItem);          this.projQueue.item(this.queueItem).outputModule(1).applyTemplate("Lossless with Alpha");          this.projQueue.item(this.queueItem).outputModule(1).file = job_file;      }    } else alert("Error: Wrong Type of Comp\nYou must be in a proper renderable comp.\nIf you are in a proper renderable comp, then it's one not supported at this time.");  },  set_job_filename: function() {    // Extract product type and optional version info to plug into filename.    var active_comp = app.project.activeItem.name;    this.product = (/^.{1,3}/.exec(active_comp).toString());    // Determine type of product and call method to construct that type of filename.    if (this.product == "EPL") {    	this.build_epl_name(active_comp);    } else if (this.product == "L3D") {      this.build_l3d_name(active_comp);    } else if (this.product == "BMP") {      this.build_bmp_name(active_comp);    } else if (this.product == "Bug") {      this.build_bug_name(active_comp);    } else if (this.product == "Bil") {      this.build_bbd_name(active_comp);    } else if (this.product == "Ope") {      this.build_opn_name(active_comp);    }  },  build_epl_name: function(active_comp) {    var build_fileName = "";    (master_record.img) ? this.product += "_IMG" : this.product += "_EPI";    // Get version of endplate    var ver = (/^.{1}/.exec(active_comp.split(" ")[1])).toString().toUpperCase();    // Test for presence of duration    if (/\d/.test(active_comp)) {      var duration = /\d{1,2}/.exec(active_comp).toString();      this.version = ver + "_" + duration + "s";    } else this.version = ver;    // Build file name and set property.    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    var talent = this.format_tal_names();    if ( !webChk.value ) {      if (classifiers == 0) {        build_fileName = this.product + "_" + master_record.show + "_" + this.version + "_" + talent + day_date + "_" + time_seg;      } else build_fileName = this.product + "_" + master_record.show + "_" + this.version + "_" + talent + classifiers + "_" + day_date + "_" + time_seg;    } else {      if (classifiers == 0) {        build_fileName = this.product + "_" + master_record.show + "_" + this.version + "_" + talent + "_" + "WEB";      } else build_fileName = this.product + "_" + master_record.show + "_" + this.version + "_" + talent + "_" + classifiers + "_" + "WEB";    }    this.job_filename = build_fileName;  },  build_l3d_name: function() {    var build_fileName = this.product;    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    if ( !webChk.value ) {      if ( classifiers == 0 ) {        build_fileName += "_" + master_record.show + "_" + day_date + "_" + time_seg;      } else build_fileName += "_" + master_record.show + "_" + classifiers + "_" + day_date + "_" + time_seg;    } else {      if ( classifiers == 0 ) {        build_fileName += "_" + master_record.show + "_" + "WEB";      } else build_fileName += "_" + master_record.show + "_" + classifiers + "WEB";    }    this.job_filename = build_fileName;  },  build_bmp_name: function() {    var build_fileName = this.product;    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    build_fileName += "_" + master_record.show + "_" + day_date + "_" + time_seg;    this.job_filename = build_fileName;  },  build_bug_name: function() {    var build_fileName = this.product.toUpperCase();    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    build_fileName += "_" + master_record.show;    this.job_filename = build_fileName;  },  build_bbd_name: function() {    var build_fileName = "BBD";    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    build_fileName += "_" + master_record.show;    this.job_filename = build_fileName;  },  build_opn_name: function() {    var build_fileName = "OPN";    var time_seg = this.format_time();    var day_date = this.format_day();    var classifiers = this.format_classifiers();    build_fileName += "_" + master_record.show;    this.job_filename = build_fileName;  },  format_day: function() {    var day1 = get_day(master_record.day1);    var day2 = get_day(master_record.day2);    var day3 = get_day(master_record.day3);    var date1 = get_date(master_record.date1);    var date2 = get_date(master_record.date2);    return combine_days();    function get_day(day) {      switch(true) {        case (day == "Next") :        case (/To/.test(day)) :          return day.substring(0,3).toUpperCase();          break;        case (/day$/.test(day)) :          if (add_next.value) {            return "NEX_" + (day.substring(0,3).toUpperCase());          } else if (pluralize.value) {            return (day.substring(0,3).toUpperCase()) + "S";          } else return day.substring(0,3).toUpperCase();          // return day.substring(0,3).toUpperCase();          break;        case (day == "Weekdays") :          return "WKD";          break;        case (day == "Weeknights") :          return "WKN";          break;        case (/Keep/.test(day)) :          return "KW";          break;        case (/All/.test(day)) :          return "AD";          break;        default:          return "";      }    }    function get_date(date) {      if (date != "") {        return (/^.{3}/.exec(date)).toString().toUpperCase() + "_" + (/\d{1,2}/.exec(date)).toString();      } else return "";    }    function combine_days() {      switch(true) {        case (day1 != "" && day2 != "" && day3 != "") :          return day1 + "_" + day2 + "_" + day3;          break;        case (day1 != "" && day2 != "") :          return day1 + "_" + day2;          break;        case (day1 != "" && date2 != "") :          return day1 + "_" + date2;          break;        case (day1 != "") :          return day1;          break;        case (date1 != "" && date2 != "") :          return date1 + "_" + date2;          break;        case (date1 != "") :          return date1;          break;      }     }  },  format_time: function() {    var time_seg = master_record.time.split("/")[0];    if (/:30/.test(time_seg)) time_seg = time_seg.replace(/:30/, "30");    time_seg += /.{2}$/.exec(master_record.time).toString().toLowerCase();    return time_seg;  },  format_classifiers: function() {    var c = "";    if (listShowClass.selection > 0) {      // Add numbers if referring to a particular season      if (listShowClass.selection == 1 && season.text != 0) {        c += show_classifier_abrv[listShowClass.selection.index - 1] + season.text.toString();      } else if (listShowClass.selection == 4 && season.text != 0) {        c += /^./.exec(show_classifier_abrv[listShowClass.selection.index - 1].toString()).toString() +              season.text.toString() + /.{2}$/.exec(show_classifier_abrv[listShowClass.selection.index - 1]).toString();      } else if (listShowClass.selection > 1) c += show_classifier_abrv[listShowClass.selection.index - 1];    }    if (listTuneClass.selection > 0) {      // Add separator if using two classifiers      if (c != "") c+= "_";      if (listTuneClass.selection == 1 && season.text != 0) {        c += tunein_classifier_abrv[listTuneClass.selection.index - 1] + season.text.toString();      } else if (listTuneClass.selection == 4 && season.text != 0) {        c += /^./.exec(tunein_classifier_abrv[listTuneClass.selection.index - 1]).toString() +           season.text.toString() +           /.{2}$/.exec(tunein_classifier_abrv[listTuneClass.selection.index - 1]).toString();      } else if (listTuneClass.selection > 1) c += tunein_classifier_abrv[listTuneClass.selection.index - 1];    }    if (c == "") {      return 0;    } else return c;  },  format_tal_names: function() {    var active_tal_comp;    var talent = "";    // Find active talent comp    for (var i = 1; i <= epl_r_tal_container.items.length; i++) {      if (epl_r_tal_container.item(i).name == master_record.show) {        active_tal_comp = epl_r_tal_container.item(i);        // Get active layer(s) in comp, and build return string        for (var j = 1; j <= active_tal_comp.numLayers; j++) {          if ( active_tal_comp.layer(j).hasVideo &&  active_tal_comp.layer(j).active &&              !active_tal_comp.layer(j).adjustmentLayer && !(active_tal_comp.layer(j).source.mainSource instanceof SolidSource) ) {            talent += (active_tal_comp.layer(j).name).replace(/\s+/, "_").toUpperCase() + "_"; //( /\s+/.replace(active_tal_comp.layer(j).name) ).toUpperCase() + "_";          }        }      }    }    return talent;  }};} // End main/**********************************************************************************************************************************/**/** TODO/**/*********************************************************************************************************************************//**/